import os
import atexit
import shutil
import glob
import logging
import utils.logger # noqa: F401
from datetime import datetime
from config import BOT_TOKEN, DATABASE_PATH
from utils.models.base import engine
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from handlers.common_handlers import back_button_callback_handler, nope_button_callback_handler, \
    yes_button_callback_handler
from handlers.manage_bot import manage_bot_callback_handler
from handlers.commands import command_handler
from handlers.daily_report import daily_report_message_handler, daily_report_callback_handler
from handlers.main_menu import main_menu_callback_handler
from dotenv import load_dotenv
from utils.db_sync import update_from_google_to_db


logger = logging.getLogger(__name__)
load_dotenv()

def shutdown_hook() -> None:
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    logger.info("[shutdown_hook] üõë –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞‚Ä¶")

    # 1) –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ ¬´—Å–ª–∏—Ç—å¬ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è SQLAlchemy
    try:
        engine.dispose()
        logger.info("[shutdown_hook] ‚úÖ SQLAlchemy engine.dispose() –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"[shutdown_hook] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –ë–î: {e}")

    # 2) –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞ SQLite
    try:
        # –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã
        db_file = DATABASE_PATH.replace("sqlite:///", "")
        base, ext = os.path.splitext(db_file)
        backup_dir = os.path.dirname(db_file)

        # —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
        pattern = os.path.join(backup_dir, f"{os.path.basename(base)}_backup_*{ext}")
        backups = glob.glob(pattern)

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ (–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD_HHMMSS –¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
        backups.sort()

        # –µ—Å–ª–∏ –±—ç–∫–∞–ø–æ–≤ –±–æ–ª—å—à–µ —Ç—Ä—ë—Ö ‚Äî —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ª–∏—à–Ω–∏–µ
        if len(backups) >= 3:
            to_delete = backups[:len(backups) - 2]  # –æ—Å—Ç–∞–≤–ª—è–µ–º 2 —Å—Ç–∞—Ä—ã—Ö + –Ω–æ–≤—ã–π (–±—É–¥–µ—Ç 3)
            for old in to_delete:
                try:
                    os.remove(old)
                    logger.info(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old}")
                except Exception as e:
                    logger.warning(f"–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å {old}: {e}")

        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±—ç–∫–∞–ø
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        backup_file = os.path.join(
            backup_dir,
            f"{os.path.basename(base)}_backup_{timestamp}{ext}"
        )
        shutil.copy(db_file, backup_file)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ë–î: {backup_file}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫–∞–ø–µ –∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ë–î: {e}")

    # 3) –°–±—Ä–æ—Å –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    root_logger = logging.getLogger()
    for handler in list(root_logger.handlers):
        try:
            handler.flush()
            handler.close()
        except Exception:
            pass
    logger.info("[shutdown_hook] ‚úÖ –í—Å–µ –ª–æ–≥–≥–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à hook ‚Äî –æ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
atexit.register(shutdown_hook)


def main():
    logger.info("[bot.py] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        update_from_google_to_db()
        # init_db()

        logger.info("[bot.py] ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.exception(f"[bot.py] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")

    logger.info("[main] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler(["start", "daily_report"], command_handler))
    app.add_handler(CallbackQueryHandler(main_menu_callback_handler, pattern="^main_menu."))
    app.add_handler(CallbackQueryHandler(daily_report_callback_handler, pattern="^daily_report."))
    app.add_handler(CallbackQueryHandler(yes_button_callback_handler, pattern="^yes"))
    app.add_handler(CallbackQueryHandler(nope_button_callback_handler, pattern="^nope"))
    app.add_handler(CallbackQueryHandler(back_button_callback_handler, pattern="^back"))
    app.add_handler(CallbackQueryHandler(manage_bot_callback_handler, pattern="^manage_bot."))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, daily_report_message_handler))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
